import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;

class MergeLists {

    public static void main(String[] args) {
        int[] n = { 20, 200, 2000, 20000, 200000 };
        List<List<Integer>> list_of_arrays = new ArrayList<>();

        // Creating a list of arrays
        for (int size : n) {
            int[] randomArray = new int[size];
            for (int i = 0; i < size; i++) {
                randomArray[i] = (int) (Math.random() * 901) + 100; // Generates random integers between 100 and 1000
            }
            Arrays.sort(randomArray);
            List<Integer> arrayList = new ArrayList<>();
            for (int num : randomArray) {
                arrayList.add(num);
            }
            list_of_arrays.add(arrayList);
        }

        List<Integer> timeTaken = new ArrayList<>();
        List<Double> timeRun = new ArrayList<>();

        for (List<Integer> array : list_of_arrays) {
            long startTime = System.nanoTime();
            PriorityQueue<Integer> minHeap = new PriorityQueue<>(array);
            int totalTime = 0;
            List<Integer> mergingSequence = new ArrayList<>();

            while (minHeap.size() > 1) {
                int min1 = minHeap.poll();
                int min2 = minHeap.poll();
                int mergedSize = min1 + min2;
                mergingSequence.add(mergedSize);
                minHeap.add(mergedSize);
                totalTime += mergedSize;
            }

            long endTime = System.nanoTime();
            timeTaken.add(totalTime);
            timeRun.add((endTime - startTime) / 1_000_000_000.0);
        }

        // Printing the results
        System.out.println("n\t\tTime Taken for Merge\t\tTime Taken in Seconds");
        for (int i = 0; i < n.length; i++) {
            System.out.println(n[i] + "\t\t" + timeTaken.get(i) + "\t\t\t\t\t\t" + timeRun.get(i));
        }
    }
}
